{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web-ZMQSocket\\\\Web-ZQMSocket_Font-end\\\\my-zmqsocket\\\\src\\\\components\\\\header\\\\formLogin.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input, notification } from 'antd';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport { REFRESH_TOKEN_KEY, TOKEN_KEY, URL_API } from '../../utils/common';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormLogin = props => {\n  _s();\n\n  const {\n    setIsOpenFormLogin\n  } = props;\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = values => {\n    setLoading(true);\n    const payload = {\n      username: values.username,\n      password: values.password\n    };\n    axios.post(`${URL_API}/User/login`, payload).then(res => {\n      if (res.data.success) {\n        Cookies.set(TOKEN_KEY, res.data.item.accessToken);\n        Cookies.set(REFRESH_TOKEN_KEY, res.data.item.refreshToken);\n        window.location.reload();\n        notification.success({\n          message: 'Bạn đã đăng nhập thành công'\n        });\n        setIsOpenFormLogin(false);\n      } else {\n        notification.error({\n          message: res.data.message\n        });\n      }\n    }).catch(error => console.log(error)).finally(() => setLoading(false));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    name: \"basic\",\n    initialValues: {\n      remember: true\n    },\n    onFinish: onFinish,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"username\",\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Vui l\\xF2ng nh\\u1EADp username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input.Password, {\n        placeholder: \"Vui l\\xF2ng nh\\u1EADp password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: loading,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormLogin, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n\n_c = FormLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormLogin\");","map":{"version":3,"names":["Button","Form","Input","notification","axios","React","useState","REFRESH_TOKEN_KEY","TOKEN_KEY","URL_API","Cookies","FormLogin","props","setIsOpenFormLogin","loading","setLoading","onFinish","values","payload","username","password","post","then","res","data","success","set","item","accessToken","refreshToken","window","location","reload","message","error","catch","console","log","finally","remember","required"],"sources":["C:/Web-ZMQSocket/Web-ZQMSocket_Font-end/my-zmqsocket/src/components/header/formLogin.js"],"sourcesContent":["import { Button, Form, Input, notification } from 'antd';\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { REFRESH_TOKEN_KEY, TOKEN_KEY, URL_API } from '../../utils/common';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport const FormLogin = (props) => {\r\n  const { setIsOpenFormLogin } = props;\r\n  const [loading, setLoading] = useState(false);\r\n  const onFinish = (values) => {\r\n    setLoading(true);\r\n    const payload = {\r\n      username: values.username,\r\n      password: values.password,\r\n    };\r\n    axios.post(`${URL_API}/User/login`, payload)\r\n      .then(res => {\r\n        if(res.data.success) {\r\n          Cookies.set(TOKEN_KEY, res.data.item.accessToken);\r\n          Cookies.set(REFRESH_TOKEN_KEY, res.data.item.refreshToken);\r\n          window.location.reload();\r\n          notification.success({\r\n            message: 'Bạn đã đăng nhập thành công',\r\n          });\r\n          setIsOpenFormLogin(false);\r\n        }else{\r\n          notification.error({\r\n            message: res.data.message\r\n          });\r\n        }\r\n      })\r\n      .catch(error => console.log(error))\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      onFinish={onFinish}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.Item\r\n        name=\"username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your username!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input placeholder='Vui lòng nhập username' />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your password!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password placeholder='Vui lòng nhập password' />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,MAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,oBAAtD;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAClC,MAAM;IAAEC;EAAF,IAAyBD,KAA/B;EACA,MAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;;EACA,MAAMU,QAAQ,GAAIC,MAAD,IAAY;IAC3BF,UAAU,CAAC,IAAD,CAAV;IACA,MAAMG,OAAO,GAAG;MACdC,QAAQ,EAAEF,MAAM,CAACE,QADH;MAEdC,QAAQ,EAAEH,MAAM,CAACG;IAFH,CAAhB;IAIAhB,KAAK,CAACiB,IAAN,CAAY,GAAEZ,OAAQ,aAAtB,EAAoCS,OAApC,EACGI,IADH,CACQC,GAAG,IAAI;MACX,IAAGA,GAAG,CAACC,IAAJ,CAASC,OAAZ,EAAqB;QACnBf,OAAO,CAACgB,GAAR,CAAYlB,SAAZ,EAAuBe,GAAG,CAACC,IAAJ,CAASG,IAAT,CAAcC,WAArC;QACAlB,OAAO,CAACgB,GAAR,CAAYnB,iBAAZ,EAA+BgB,GAAG,CAACC,IAAJ,CAASG,IAAT,CAAcE,YAA7C;QACAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB;QACA7B,YAAY,CAACsB,OAAb,CAAqB;UACnBQ,OAAO,EAAE;QADU,CAArB;QAGApB,kBAAkB,CAAC,KAAD,CAAlB;MACD,CARD,MAQK;QACHV,YAAY,CAAC+B,KAAb,CAAmB;UACjBD,OAAO,EAAEV,GAAG,CAACC,IAAJ,CAASS;QADD,CAAnB;MAGD;IACF,CAfH,EAgBGE,KAhBH,CAgBSD,KAAK,IAAIE,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAhBlB,EAiBGI,OAjBH,CAiBW,MAAMvB,UAAU,CAAC,KAAD,CAjB3B;EAkBD,CAxBD;;EA0BA,oBACE,QAAC,IAAD;IACE,IAAI,EAAC,OADP;IAEE,aAAa,EAAE;MACbwB,QAAQ,EAAE;IADG,CAFjB;IAKE,QAAQ,EAAEvB,QALZ;IAME,YAAY,EAAC,KANf;IAAA,wBAQE,QAAC,IAAD,CAAM,IAAN;MACE,IAAI,EAAC,UADP;MAEE,KAAK,EAAE,CACL;QACEwB,QAAQ,EAAE,IADZ;QAEEP,OAAO,EAAE;MAFX,CADK,CAFT;MAAA,uBASE,QAAC,KAAD;QAAO,WAAW,EAAC;MAAnB;QAAA;QAAA;QAAA;MAAA;IATF;MAAA;MAAA;MAAA;IAAA,QARF,eAoBE,QAAC,IAAD,CAAM,IAAN;MACE,IAAI,EAAC,UADP;MAEE,KAAK,EAAE,CACL;QACEO,QAAQ,EAAE,IADZ;QAEEP,OAAO,EAAE;MAFX,CADK,CAFT;MAAA,uBASE,QAAC,KAAD,CAAO,QAAP;QAAgB,WAAW,EAAC;MAA5B;QAAA;QAAA;QAAA;MAAA;IATF;MAAA;MAAA;MAAA;IAAA,QApBF,eA+BE,QAAC,IAAD,CAAM,IAAN;MAAA,uBACE,QAAC,MAAD;QAAQ,IAAI,EAAC,SAAb;QAAuB,QAAQ,EAAC,QAAhC;QAAyC,OAAO,EAAEnB,OAAlD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QA/BF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAuCD,CApEM;;GAAMH,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}